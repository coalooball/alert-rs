use serde::{Deserialize, Serialize};
use serde_json::Value;

/// 恶意样本告警
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MaliciousSampleAlert {
    pub alarm_id: Option<String>,
    pub alarm_date: Option<i64>,
    pub alarm_severity: Option<u8>,
    pub alarm_name: Option<String>,
    pub alarm_description: Option<String>,
    pub alarm_type: u8,
    pub alarm_subtype: u16,
    pub source: u8,
    pub control_rule_id: Option<String>,
    pub control_task_id: Option<String>,
    pub procedure_technique_id: Option<Vec<String>>,
    pub session_id: Option<String>,
    pub ip_version: Option<u8>,
    pub src_ip: Option<String>,
    pub src_port: Option<u16>,
    pub dst_ip: Option<String>,
    pub dst_port: Option<u16>,
    pub protocol: Option<String>,
    pub terminal_id: Option<String>,
    pub source_file_path: Option<String>,
    pub sample_source: Option<u8>,
    pub md5: Option<String>,
    pub sha1: Option<String>,
    pub sha256: Option<String>,
    pub sha512: Option<String>,
    pub ssdeep: Option<String>,
    pub sample_original_name: Option<String>,
    pub sample_description: Option<String>,
    pub sample_family: Option<String>,
    pub apt_group: Option<String>,
    pub sample_alarm_engine: Option<Vec<u8>>,
    pub target_platform: Option<String>,
    pub file_type: Option<String>,
    pub file_size: Option<u64>,
    pub language: Option<String>,
    pub rule: Option<String>,
    pub target_content: Option<String>,
    pub compile_date: Option<i64>,
    pub last_analy_date: Option<i64>,
    pub sample_alarm_detail: Option<String>,
    pub data: Option<Value>,
}
